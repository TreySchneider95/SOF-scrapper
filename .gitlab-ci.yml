# Tagged releases of Python docker images can be found at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python --version  # Print out python version for debugging
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt

stages:
  - Static Analysis
  - Test
  - Schedule
  - Deploy

Pylint:
  stage: Static Analysis
  script:
  - pylint scrapper.py || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'


pytest:
  stage: Test
  script:
  - python -m pytest || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'



automation:
  stage: Schedule
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - python3 scrapper.py


heroku:
 stage: Deploy
 only:
 - main
 script:
 - git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/sof-scrapper.git
 - git push -f heroku master
